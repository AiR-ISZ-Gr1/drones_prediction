
// Code generated by stanc v2.29.0
#include <stan/model/model_header.hpp>
namespace mix_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 65> locations_array__ = 
{" (found before start of program)",
 " (in '/home/stan/mix.stan', line 24, column 2 to column 20)",
 " (in '/home/stan/mix.stan', line 25, column 2 to column 32)",
 " (in '/home/stan/mix.stan', line 26, column 2 to column 21)",
 " (in '/home/stan/mix.stan', line 46, column 2 to column 29)",
 " (in '/home/stan/mix.stan', line 47, column 2 to column 33)",
 " (in '/home/stan/mix.stan', line 49, column 2 to column 18)",
 " (in '/home/stan/mix.stan', line 54, column 10 to column 105)",
 " (in '/home/stan/mix.stan', line 55, column 10 to column 51)",
 " (in '/home/stan/mix.stan', line 52, column 21 to line 57, column 7)",
 " (in '/home/stan/mix.stan', line 52, column 6 to line 57, column 7)",
 " (in '/home/stan/mix.stan', line 58, column 6 to column 58)",
 " (in '/home/stan/mix.stan', line 59, column 6 to column 69)",
 " (in '/home/stan/mix.stan', line 50, column 19 to line 60, column 4)",
 " (in '/home/stan/mix.stan', line 50, column 3 to line 60, column 4)",
 " (in '/home/stan/mix.stan', line 48, column 2 to line 61, column 3)",
 " (in '/home/stan/mix.stan', line 62, column 2 to column 41)",
 " (in '/home/stan/mix.stan', line 29, column 9 to column 10)",
 " (in '/home/stan/mix.stan', line 29, column 2 to column 37)",
 " (in '/home/stan/mix.stan', line 33, column 5 to column 45)",
 " (in '/home/stan/mix.stan', line 31, column 17 to line 34, column 3)",
 " (in '/home/stan/mix.stan', line 31, column 2 to line 34, column 3)",
 " (in '/home/stan/mix.stan', line 36, column 2 to column 25)",
 " (in '/home/stan/mix.stan', line 37, column 2 to column 30)",
 " (in '/home/stan/mix.stan', line 40, column 4 to column 89)",
 " (in '/home/stan/mix.stan', line 39, column 18 to line 41, column 3)",
 " (in '/home/stan/mix.stan', line 39, column 2 to line 41, column 3)",
 " (in '/home/stan/mix.stan', line 2, column 2 to column 17)",
 " (in '/home/stan/mix.stan', line 3, column 2 to column 18)",
 " (in '/home/stan/mix.stan', line 4, column 2 to column 17)",
 " (in '/home/stan/mix.stan', line 5, column 2 to column 17)",
 " (in '/home/stan/mix.stan', line 6, column 9 to column 10)",
 " (in '/home/stan/mix.stan', line 6, column 12 to column 13)",
 " (in '/home/stan/mix.stan', line 6, column 2 to column 17)",
 " (in '/home/stan/mix.stan', line 7, column 8 to column 10)",
 " (in '/home/stan/mix.stan', line 7, column 2 to column 40)",
 " (in '/home/stan/mix.stan', line 8, column 9 to column 10)",
 " (in '/home/stan/mix.stan', line 8, column 11 to column 13)",
 " (in '/home/stan/mix.stan', line 8, column 2 to column 26)",
 " (in '/home/stan/mix.stan', line 9, column 11 to column 12)",
 " (in '/home/stan/mix.stan', line 9, column 2 to column 22)",
 " (in '/home/stan/mix.stan', line 10, column 2 to column 18)",
 " (in '/home/stan/mix.stan', line 11, column 9 to column 10)",
 " (in '/home/stan/mix.stan', line 11, column 11 to column 13)",
 " (in '/home/stan/mix.stan', line 11, column 2 to column 23)",
 " (in '/home/stan/mix.stan', line 15, column 9 to column 10)",
 " (in '/home/stan/mix.stan', line 15, column 12 to column 13)",
 " (in '/home/stan/mix.stan', line 15, column 2 to column 21)",
 " (in '/home/stan/mix.stan', line 16, column 9 to column 10)",
 " (in '/home/stan/mix.stan', line 16, column 12 to column 13)",
 " (in '/home/stan/mix.stan', line 16, column 2 to column 21)",
 " (in '/home/stan/mix.stan', line 17, column 9 to column 10)",
 " (in '/home/stan/mix.stan', line 17, column 12 to column 13)",
 " (in '/home/stan/mix.stan', line 17, column 2 to column 29)",
 " (in '/home/stan/mix.stan', line 19, column 2 to column 37)",
 " (in '/home/stan/mix.stan', line 20, column 2 to column 37)",
 " (in '/home/stan/mix.stan', line 21, column 2 to column 33)",
 " (in '/home/stan/mix.stan', line 24, column 9 to column 10)",
 " (in '/home/stan/mix.stan', line 24, column 11 to column 12)",
 " (in '/home/stan/mix.stan', line 25, column 9 to column 10)",
 " (in '/home/stan/mix.stan', line 26, column 11 to column 12)",
 " (in '/home/stan/mix.stan', line 46, column 9 to column 10)",
 " (in '/home/stan/mix.stan', line 46, column 11 to column 13)",
 " (in '/home/stan/mix.stan', line 47, column 9 to column 10)",
 " (in '/home/stan/mix.stan', line 47, column 11 to column 13)"};




class mix_model final : public model_base_crtp<mix_model> {

 private:
  int N;
  int IL;
  int K;
  int M;
  Eigen::Matrix<double, -1, -1> x__;
  std::vector<int> labels;
  Eigen::Matrix<double, -1, -1> y_labeled__;
  Eigen::Matrix<double, -1, 1> lambda0__;
  int IT;
  Eigen::Matrix<double, -1, -1> y_test__;
  Eigen::Matrix<double, -1, -1> Q_ast__;
  Eigen::Matrix<double, -1, -1> R_ast__;
  Eigen::Matrix<double, -1, -1> R_ast_inverse__; 
  Eigen::Map<Eigen::Matrix<double, -1, -1>> x{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> y_labeled{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> lambda0{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> y_test{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> Q_ast{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> R_ast{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> R_ast_inverse{nullptr, 0, 0};
 
 public:
  ~mix_model() { }
  
  inline std::string model_name() const final { return "mix_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.29.0", "stancflags = "};
  }
  
  
  mix_model(stan::io::var_context& context__, unsigned int random_seed__ = 0,
            std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "mix_model_namespace::mix_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 27;
      context__.validate_dims("data initialization","N","int",
           std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      
      
      current_statement__ = 27;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 27;
      stan::math::check_greater_or_equal(function__, "N", N, 1);
      current_statement__ = 28;
      context__.validate_dims("data initialization","IL","int",
           std::vector<size_t>{});
      IL = std::numeric_limits<int>::min();
      
      
      current_statement__ = 28;
      IL = context__.vals_i("IL")[(1 - 1)];
      current_statement__ = 28;
      stan::math::check_greater_or_equal(function__, "IL", IL, 1);
      current_statement__ = 29;
      context__.validate_dims("data initialization","K","int",
           std::vector<size_t>{});
      K = std::numeric_limits<int>::min();
      
      
      current_statement__ = 29;
      K = context__.vals_i("K")[(1 - 1)];
      current_statement__ = 29;
      stan::math::check_greater_or_equal(function__, "K", K, 1);
      current_statement__ = 30;
      context__.validate_dims("data initialization","M","int",
           std::vector<size_t>{});
      M = std::numeric_limits<int>::min();
      
      
      current_statement__ = 30;
      M = context__.vals_i("M")[(1 - 1)];
      current_statement__ = 30;
      stan::math::check_greater_or_equal(function__, "M", M, 1);
      current_statement__ = 31;
      stan::math::validate_non_negative_index("x", "N", N);
      current_statement__ = 32;
      stan::math::validate_non_negative_index("x", "K", K);
      current_statement__ = 33;
      context__.validate_dims("data initialization","x","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(K)});
      x__ = 
        Eigen::Matrix<double, -1, -1>::Constant(N, K,
          std::numeric_limits<double>::quiet_NaN());
      new (&x) Eigen::Map<Eigen::Matrix<double, -1, -1>>(x__.data(), N, K);
      
      {
        std::vector<local_scalar_t__> x_flat__;
        current_statement__ = 33;
        x_flat__ = context__.vals_r("x");
        current_statement__ = 33;
        pos__ = 1;
        current_statement__ = 33;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 33;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 33;
            stan::model::assign(x, x_flat__[(pos__ - 1)],
              "assigning variable x", stan::model::index_uni(sym2__),
                                        stan::model::index_uni(sym1__));
            current_statement__ = 33;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 34;
      stan::math::validate_non_negative_index("labels", "IL", IL);
      current_statement__ = 35;
      context__.validate_dims("data initialization","labels","int",
           std::vector<size_t>{static_cast<size_t>(IL)});
      labels = std::vector<int>(IL, std::numeric_limits<int>::min());
      
      
      current_statement__ = 35;
      labels = context__.vals_i("labels");
      current_statement__ = 35;
      stan::math::check_greater_or_equal(function__, "labels", labels, 1);
      current_statement__ = 35;
      stan::math::check_less_or_equal(function__, "labels", labels, M);
      current_statement__ = 36;
      stan::math::validate_non_negative_index("y_labeled", "N", N);
      current_statement__ = 37;
      stan::math::validate_non_negative_index("y_labeled", "IL", IL);
      current_statement__ = 38;
      context__.validate_dims("data initialization","y_labeled","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(IL)});
      y_labeled__ = 
        Eigen::Matrix<double, -1, -1>::Constant(N, IL,
          std::numeric_limits<double>::quiet_NaN());
      new (&y_labeled) Eigen::Map<Eigen::Matrix<double, -1, -1>>(y_labeled__.data(), N, IL);
        
      
      {
        std::vector<local_scalar_t__> y_labeled_flat__;
        current_statement__ = 38;
        y_labeled_flat__ = context__.vals_r("y_labeled");
        current_statement__ = 38;
        pos__ = 1;
        current_statement__ = 38;
        for (int sym1__ = 1; sym1__ <= IL; ++sym1__) {
          current_statement__ = 38;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 38;
            stan::model::assign(y_labeled, y_labeled_flat__[(pos__ - 1)],
              "assigning variable y_labeled", stan::model::index_uni(sym2__),
                                                stan::model::index_uni(sym1__));
            current_statement__ = 38;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 39;
      stan::math::validate_non_negative_index("lambda0", "M", M);
      current_statement__ = 40;
      context__.validate_dims("data initialization","lambda0","double",
           std::vector<size_t>{static_cast<size_t>(M)});
      lambda0__ = 
        Eigen::Matrix<double, -1, 1>::Constant(M,
          std::numeric_limits<double>::quiet_NaN());
      new (&lambda0) Eigen::Map<Eigen::Matrix<double, -1, 1>>(lambda0__.data(), M);
        
      
      {
        std::vector<local_scalar_t__> lambda0_flat__;
        current_statement__ = 40;
        lambda0_flat__ = context__.vals_r("lambda0");
        current_statement__ = 40;
        pos__ = 1;
        current_statement__ = 40;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          current_statement__ = 40;
          stan::model::assign(lambda0, lambda0_flat__[(pos__ - 1)],
            "assigning variable lambda0", stan::model::index_uni(sym1__));
          current_statement__ = 40;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 40;
      stan::math::check_simplex(function__, "lambda0", lambda0);
      current_statement__ = 41;
      context__.validate_dims("data initialization","IT","int",
           std::vector<size_t>{});
      IT = std::numeric_limits<int>::min();
      
      
      current_statement__ = 41;
      IT = context__.vals_i("IT")[(1 - 1)];
      current_statement__ = 41;
      stan::math::check_greater_or_equal(function__, "IT", IT, 1);
      current_statement__ = 42;
      stan::math::validate_non_negative_index("y_test", "N", N);
      current_statement__ = 43;
      stan::math::validate_non_negative_index("y_test", "IT", IT);
      current_statement__ = 44;
      context__.validate_dims("data initialization","y_test","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(IT)});
      y_test__ = 
        Eigen::Matrix<double, -1, -1>::Constant(N, IT,
          std::numeric_limits<double>::quiet_NaN());
      new (&y_test) Eigen::Map<Eigen::Matrix<double, -1, -1>>(y_test__.data(), N, IT);
        
      
      {
        std::vector<local_scalar_t__> y_test_flat__;
        current_statement__ = 44;
        y_test_flat__ = context__.vals_r("y_test");
        current_statement__ = 44;
        pos__ = 1;
        current_statement__ = 44;
        for (int sym1__ = 1; sym1__ <= IT; ++sym1__) {
          current_statement__ = 44;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 44;
            stan::model::assign(y_test, y_test_flat__[(pos__ - 1)],
              "assigning variable y_test", stan::model::index_uni(sym2__),
                                             stan::model::index_uni(sym1__));
            current_statement__ = 44;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 45;
      stan::math::validate_non_negative_index("Q_ast", "N", N);
      current_statement__ = 46;
      stan::math::validate_non_negative_index("Q_ast", "K", K);
      current_statement__ = 47;
      Q_ast__ = 
        Eigen::Matrix<double, -1, -1>::Constant(N, K,
          std::numeric_limits<double>::quiet_NaN());
      new (&Q_ast) Eigen::Map<Eigen::Matrix<double, -1, -1>>(Q_ast__.data(), N, K);
        
      
      current_statement__ = 48;
      stan::math::validate_non_negative_index("R_ast", "K", K);
      current_statement__ = 49;
      stan::math::validate_non_negative_index("R_ast", "K", K);
      current_statement__ = 50;
      R_ast__ = 
        Eigen::Matrix<double, -1, -1>::Constant(K, K,
          std::numeric_limits<double>::quiet_NaN());
      new (&R_ast) Eigen::Map<Eigen::Matrix<double, -1, -1>>(R_ast__.data(), K, K);
        
      
      current_statement__ = 51;
      stan::math::validate_non_negative_index("R_ast_inverse", "K", K);
      current_statement__ = 52;
      stan::math::validate_non_negative_index("R_ast_inverse", "K", K);
      current_statement__ = 53;
      R_ast_inverse__ = 
        Eigen::Matrix<double, -1, -1>::Constant(K, K,
          std::numeric_limits<double>::quiet_NaN());
      new (&R_ast_inverse) Eigen::Map<Eigen::Matrix<double, -1, -1>>(R_ast_inverse__.data(), K, K);
        
      
      current_statement__ = 54;
      stan::model::assign(Q_ast,
        stan::math::multiply(stan::math::qr_thin_Q(x),
          stan::math::sqrt((N - 1))), "assigning variable Q_ast");
      current_statement__ = 55;
      stan::model::assign(R_ast,
        stan::math::divide(stan::math::qr_thin_R(x),
          stan::math::sqrt((N - 1))), "assigning variable R_ast");
      current_statement__ = 56;
      stan::model::assign(R_ast_inverse, stan::math::inverse(R_ast),
        "assigning variable R_ast_inverse");
      current_statement__ = 57;
      stan::math::validate_non_negative_index("betas", "K", K);
      current_statement__ = 58;
      stan::math::validate_non_negative_index("betas", "M", M);
      current_statement__ = 59;
      stan::math::validate_non_negative_index("sigma", "M", M);
      current_statement__ = 60;
      stan::math::validate_positive_index("lambda", "M", M);
      current_statement__ = 61;
      stan::math::validate_non_negative_index("probabilities", "M", M);
      current_statement__ = 62;
      stan::math::validate_non_negative_index("probabilities", "IT", IT);
      current_statement__ = 63;
      stan::math::validate_non_negative_index("log_probabilities", "M", M);
      current_statement__ = 64;
      stan::math::validate_non_negative_index("log_probabilities", "IT", IT);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = (K * M) + M + (M - 1);
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "mix_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, -1, -1> betas =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(K, M, DUMMY_VAR__);
      current_statement__ = 1;
      betas = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(K,
                M);
      std::vector<local_scalar_t__> sigma =
         std::vector<local_scalar_t__>(M, DUMMY_VAR__);
      current_statement__ = 2;
      sigma = in__.template read_constrain_lb<std::vector<local_scalar_t__>, 
                jacobian__>(0, lp__, M);
      Eigen::Matrix<local_scalar_t__, -1, 1> lambda =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(M, DUMMY_VAR__);
      current_statement__ = 3;
      lambda = in__.template read_constrain_simplex<
                 Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(lp__, M);
      {
        current_statement__ = 17;
        stan::math::validate_non_negative_index("log_lambda", "M", M);
        Eigen::Matrix<local_scalar_t__, -1, 1> log_lambda =
           Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(M, DUMMY_VAR__);
        current_statement__ = 18;
        stan::model::assign(log_lambda, stan::math::log(lambda),
          "assigning variable log_lambda");
        current_statement__ = 21;
        for (int m = 1; m <= M; ++m) {
          current_statement__ = 19;
          lp_accum__.add(
            stan::math::std_normal_lpdf<false>(
              stan::model::rvalue(betas, "betas",
                stan::model::index_min_max(1, K), stan::model::index_uni(m))));
        }
        current_statement__ = 22;
        lp_accum__.add(stan::math::exponential_lpdf<propto__>(sigma, 1));
        current_statement__ = 23;
        lp_accum__.add(stan::math::dirichlet_lpdf<propto__>(lambda, lambda0));
        current_statement__ = 26;
        for (int n = 1; n <= IL; ++n) {
          current_statement__ = 24;
          lp_accum__.add(
            stan::math::normal_lpdf<false>(
              stan::model::rvalue(y_labeled, "y_labeled",
                stan::model::index_min_max(1, N), stan::model::index_uni(n)),
              stan::math::multiply(x,
                stan::model::rvalue(betas, "betas",
                  stan::model::index_min_max(1, K),
                    stan::model::index_uni(stan::model::rvalue(labels,
                                             "labels",
                                             stan::model::index_uni(n))))),
              stan::model::rvalue(sigma, "sigma",
                stan::model::index_uni(stan::model::rvalue(labels, "labels",
                                         stan::model::index_uni(n))))));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "mix_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, -1, -1> betas =
         Eigen::Matrix<double, -1, -1>::Constant(K, M,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      betas = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(K,
                M);
      std::vector<double> sigma =
         std::vector<double>(M, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      sigma = in__.template read_constrain_lb<std::vector<local_scalar_t__>, 
                jacobian__>(0, lp__, M);
      Eigen::Matrix<double, -1, 1> lambda =
         Eigen::Matrix<double, -1, 1>::Constant(M,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      lambda = in__.template read_constrain_simplex<
                 Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(lp__, M);
      out__.write(betas);
      out__.write(sigma);
      out__.write(lambda);
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      } 
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      Eigen::Matrix<double, -1, -1> probabilities =
         Eigen::Matrix<double, -1, -1>::Constant(M, IT,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, -1> log_probabilities =
         Eigen::Matrix<double, -1, -1>::Constant(M, IT,
           std::numeric_limits<double>::quiet_NaN());
      {
        double normalizer = std::numeric_limits<double>::quiet_NaN();
        current_statement__ = 14;
        for (int n = 1; n <= IT; ++n) {
          current_statement__ = 10;
          for (int m = 1; m <= M; ++m) {
            current_statement__ = 7;
            stan::model::assign(log_probabilities,
              (stan::math::normal_lpdf<false>(
                 stan::model::rvalue(y_test, "y_test",
                   stan::model::index_min_max(1, N),
                     stan::model::index_uni(n)),
                 stan::math::multiply(x,
                   stan::model::rvalue(betas, "betas",
                     stan::model::index_min_max(1, K),
                       stan::model::index_uni(m))),
                 stan::model::rvalue(sigma, "sigma",
                   stan::model::index_uni(m))) +
                stan::math::log(
                  stan::model::rvalue(lambda, "lambda",
                    stan::model::index_uni(m)))),
              "assigning variable log_probabilities", stan::model::index_uni(m),
                                                        stan::model::index_uni(n));
            current_statement__ = 8;
            if (pstream__) {
              stan::math::stan_print(pstream__, "probs =");
              stan::math::stan_print(pstream__, stan::model::rvalue(
                                                  log_probabilities,
                                                  "log_probabilities",
                                                  stan::model::index_uni(m),
                                                    stan::model::index_uni(n)));
              stan::math::stan_print(pstream__, "\n");
            }
          }
          current_statement__ = 11;
          normalizer = stan::math::log_sum_exp(
                         stan::model::rvalue(log_probabilities,
                           "log_probabilities",
                           stan::model::index_min_max(1, M),
                             stan::model::index_uni(n)));
          current_statement__ = 12;
          stan::model::assign(log_probabilities,
            stan::math::subtract(
              stan::model::deep_copy(
                stan::model::rvalue(log_probabilities, "log_probabilities",
                  stan::model::index_min_max(1, M), stan::model::index_uni(n))),
              normalizer),
            "assigning variable log_probabilities", stan::model::index_min_max(1, M),
                                                      stan::model::index_uni(n));
        }
      }
      current_statement__ = 16;
      stan::model::assign(probabilities, stan::math::exp(log_probabilities),
        "assigning variable probabilities");
      out__.write(probabilities);
      out__.write(log_probabilities);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__, -1, -1> betas =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(K, M, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          stan::model::assign(betas, in__.read<local_scalar_t__>(),
            "assigning variable betas", stan::model::index_uni(sym2__),
                                          stan::model::index_uni(sym1__));
        }
      }
      out__.write(betas);
      std::vector<local_scalar_t__> sigma =
         std::vector<local_scalar_t__>(M, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        sigma[(sym1__ - 1)] = in__.read<local_scalar_t__>();
      }
      out__.write_free_lb(0, sigma);
      Eigen::Matrix<local_scalar_t__, -1, 1> lambda =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(M, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        stan::model::assign(lambda, in__.read<local_scalar_t__>(),
          "assigning variable lambda", stan::model::index_uni(sym1__));
      }
      out__.write_free_simplex(lambda);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"betas", "sigma", "lambda",
      "probabilities", "log_probabilities"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{
                                                                   static_cast<size_t>(K)
                                                                   ,
                                                                   static_cast<size_t>(M)
                                                                   },
      std::vector<size_t>{static_cast<size_t>(M)},
      std::vector<size_t>{static_cast<size_t>(M)},
      std::vector<size_t>{static_cast<size_t>(M), static_cast<size_t>(IT)},
      std::vector<size_t>{static_cast<size_t>(M), static_cast<size_t>(IT)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "betas" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "lambda" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= IT; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "probabilities" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= IT; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "log_probabilities" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "betas" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= (M - 1); ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "lambda" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= IT; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "probabilities" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= IT; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "log_probabilities" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"betas\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(K) + ",\"cols\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"lambda\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"probabilities\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(M) + ",\"cols\":" + std::to_string(IT) + "},\"block\":\"generated_quantities\"},{\"name\":\"log_probabilities\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(M) + ",\"cols\":" + std::to_string(IT) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"betas\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(K) + ",\"cols\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"lambda\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string((M - 1)) + "},\"block\":\"parameters\"},{\"name\":\"probabilities\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(M) + ",\"cols\":" + std::to_string(IT) + "},\"block\":\"generated_quantities\"},{\"name\":\"log_probabilities\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(M) + ",\"cols\":" + std::to_string(IT) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  (((K * M) + M) + M);
      const size_t num_transformed = 0;
      const size_t num_gen_quantities = 
  ((M * IT) + (M * IT));
      std::vector<double> vars_vec(num_params__
       + (emit_transformed_parameters * num_transformed)
       + (emit_generated_quantities * num_gen_quantities));
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  (((K * M) + M) + M);
      const size_t num_transformed = 0;
      const size_t num_gen_quantities = 
  ((M * IT) + (M * IT));
      vars.resize(num_params__
        + (emit_transformed_parameters * num_transformed)
        + (emit_generated_quantities * num_gen_quantities));
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 3> names__{"betas", "sigma",
      "lambda"};
      const std::array<Eigen::Index, 3> constrain_param_sizes__{(K * M), 
       M, M};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
    
};
}
using stan_model = mix_model_namespace::mix_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return mix_model_namespace::profiles__;
}

#endif


